import sys
import pandas as pd
from PyQt5.QtWidgets  import *
from PyQt5 import uic
from PyQt5.QtCore import QCoreApplication

form_window = uic.loadUiType('./movie_recommendation.ui')[0]

class Exam(QMainWindow, form_window):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.tfidf_matrix = mmread('./models/tfidf_movie_review.mtx').tocsr()
        with open('./models/tfidf.pkl', 'rb') as f:
            self.tfidf = pickle.load(f)

        self.embedding_model = Word2Vec.load('./models/word2vec_movie_review_1.model')
        self.df_reviews = pd.read_csv('./cleaned_data/cleaned_reviews.csv')
        self.titles = list(self.df_reviews['titles'])
        for title in self.titles:
            self.comboBox.addItems(self.titles)
        self.comboBox.currentIndexChanged.connect(self.combobox_slot)

    def getRecommendation(self, cosine_sim):
        simScore = list(enumerate(cosine_sim[-1]))
        simScore = sorted(simScore, key=lambda x: x[1], reverse=True)
        simScore = simScore[:11]
        movie_idx = [i[0] for i in simScore]
        rec_movie_list = self.df_reviews.iloc[movie_idx, 0]
        return rec_movie_list[1:11]

    def combobox_slot(self):
        title = self.comboBox.currentText()
        print(title)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    mainWindow = Exam()
    mainWindow.show()
    sys.exit(app.exec())